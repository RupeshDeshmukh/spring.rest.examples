<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.0.xsd">

	<!-- Scans within the base package of the application for @Component classes 
		to configure as beans. -->
	<context:component-scan base-package="net.atos.wl.spring.example.data.dao" />

	<!-- To load properties file from classpath. -->
	<context:property-placeholder location="classpath*:jpa-db.properties" />

	<!-- DriverManagerDataSource class should only be used for testing purposes 
		since it does not provide pooling and will perform poorly when multiple requests 
		for a connection are made. For proper pooling mechanism either use org.apache.commons.dbcp.BasicDataSource 
		or com.mchange.v2.c3p0.ComboPooledDataSource. -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${db.driverClassName}" />
		<property name="url" value="${db.url}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />
	</bean>

	<!-- This produces a container-managed EntityManagerFactory; rather than 
		application-managed EntityManagerFactory as in case of LocalEntityManagerFactoryBean -->
	<bean id="entityManagerFactoryBean"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">

		<!-- Datasource reference. -->
		<property name="dataSource" ref="dataSource" />

		<!-- This makes /META-INF/persistence.xml is no longer necessary -->
		<property name="packagesToScan" value="net.atos.wl.spring.example.data.entity" />

		<!-- JpaVendorAdapter implementation for Hibernate EntityManager. Exposes 
			Hibernate's persistence provider and EntityManager extension interface -->
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">

				<!-- If the value of this property is true, Hibernate writes all SQL 
					statements to the console. -->
				<property name="showSql" value="${db.show.sql}" />

				<!-- Configures the used database dialect. This allows Hibernate to create 
					SQL that is optimized for the used database. -->
				<property name="databasePlatform" value="${db.jdbc.dialect}" />
				<property name="generateDdl" value="${db.generate.ddl}" />
			</bean>
		</property>
		<property name="jpaProperties">
			<props>
				<!-- Specifies the action that is invoked to the database when the Hibernate 
					SessionFactory is created or closed. -->
				<prop key="hibernate.hbm2ddl.auto">${db.hbm2ddl.auto}</prop>

				<!-- If the value of this property is true, Hibernate will use prettyprint 
					when it writes SQL to the console. -->
				<prop key="hibernate.format_sql">${db.formal.sql}</prop>
			</props>
		</property>
	</bean>

	<!-- This transaction manager is appropriate for applications that use a 
		single JPA EntityManagerFactory for transactional data access. JTA (usually 
		through JtaTransactionManager) is necessary for accessing multiple transactional 
		resources within the same transaction. -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactoryBean" />
	</bean>

	<!-- Responsible for registering the necessary Spring components that power 
		annotation-driven transaction management; such as when @Transactional methods 
		are invoked -->
	<tx:annotation-driven transaction-manager="transactionManager" />
</beans>
